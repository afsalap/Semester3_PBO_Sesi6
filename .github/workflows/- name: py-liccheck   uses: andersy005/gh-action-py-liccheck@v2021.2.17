class Kulkas:
    brand=None
    dimensi=None
    volume=None
    watt=None
    Temprature = None
    TempratureIs = []
    weight=None
    on=False

    def __init__(self, brand, dimensi, volume, watt, Temprature, weight):
      self.brand = brand
      self.dimensi = dimensi 
      self.volume = volume
      self.watt = watt
      self.Temprature = Temprature
      self.weight = weight

    def __getActiveIndex(self):
        currentActive = -1
        try:
            currentActive  = self.Temprature.index(self.Temprature)
        except:
            currentActive = -1
        return  currentActive

    def turnOn(self):
        self.on = True
        self.scanTemprature()
        self.Temprature = None

    def turnOff(self):
        self.on = False
        self.TempratureIs = []
        self.Temprature = None

    def scanTemprature(self):
        newTemprature = []
        for i in range(0, 7):
            newTemprature.append(i)
        self.TempratureIs = newTemprature

    def setTemprature(self, newTemprature):
        self.Temprature = newTemprature

    def setTempratureUp(self):
        if self.__getActiveIndex() == len(self.TempratureIs) - 1:
            self.Temprature = 0
        else:
            self.Temprature = self.__getActiveIndex() + 1

    def setTempratureDown(self):
        if self.__getActiveIndex() == 0:
            self.Temprature = len(self.TempratureIs) - 1
        else:
            self.Temprature = self.__getActiveIndex() - 1

    def printData(self):
        print("------------------------------")
        print(f'Brand : {self.brand}')
        print(f'dimensi : {self.dimensi}')
        print(f'volume : {self.volume}')
        print(f'Watt : {self.watt}')
        print(f'weight : {self.weight}')
        print(f'Temprature : {self.Temprature}')
        print(f'TempratureIs : {self.TempratureIs}')
        print(f'On  : {"Nyala" if self.on else "Mati" }')
        print(f'On  : {"Pendingin Nyala" if self.on else "Pendingin Mati" }')
        print("------------------------------\n")

# Kulkas Kamar
class PendinginNyala(Kulkas):
    def __init__(self, brand, dimensi, volume, watt, Temprature, weight):
        super(PendinginNyala, self).__init__(brand, dimensi, volume, watt, Temprature, weight)

    def scanTemprature(self):
        newTemprature = []
        for i in range(0, 7):
            newTemprature.append(i)
        self.channels = newTemprature


class PendinginMati(Kulkas):
    def __init__(self, brand, dimensi, volume, watt, Temprature, weight):
        super(PendinginNyala, self).__init__(brand, dimensi, volume, watt, Temprature, weight)

    def scanTemprature(self):
        newTemprature = []
        for i in range(0, 7):
            newTemprature.append(i)
        self.channels = newTemprature


class KulkasGEA(Kulkas):
    def __init__(self, brand, dimensi, volume, watt, Temprature, weight):
        super(KulkasGEA, self).__init__(brand, dimensi, volume, watt, Temprature, weight)
        self.brand = 'KulkasGEA'


class KulkasPolytron(Kulkas):
    def __init__(self, brand, dimensi, volume, watt, Temprature, weight):
        super(KulkasPolytron, self).__init__(brand, dimensi, volume, watt, Temprature, weight)
        self.brand = 'KulkasPolytron'


kulkasKamar = KulkasGEA('GEA', '44x47x57', '46', '82', '5', '13,2')
kulkasKamar.turnOn()
kulkasKamar.scanTemprature()
kulkasKamar.printData()

kulkasKamar.turnOff()
kulkasKamar.printData()

#kulkasDapur

kulkasDapur = KulkasPolytron('Polytron', '48x52x160', '210', '110', '3', '43')
kulkasDapur.turnOn()
kulkasDapur.scanTemprature()
kulkasDapur.printData()

kulkasDapur.turnOff()
kulkasDapur.printData()
